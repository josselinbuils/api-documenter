// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`api-documenter should generate doc ListManager.md should match snapshot 1`] = `
"<!-- Do not edit this file. It is automatically generated by API Documenter. -->

[api-documenter](../README.md) > [API Documentation](./README.md) > ListManager

# ListManager

Manager provided by useList.

\`\`\`typescript
interface ListManager<T>
\`\`\`
"
`;

exports[`api-documenter should generate doc README.md should match snapshot 1`] = `
"<!-- Do not edit this file. It is automatically generated by API Documenter. -->

[api-documenter](../README.md) > API Documentation

# API Documentation

## Interfaces

| Interface                       | Description                  |
| ------------------------------- | ---------------------------- |
| [ListManager](./ListManager.md) | Manager provided by useList. |

## Functions

| Function                                  | Description                                                                                                                                                                                                                                                        |
| ----------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| [useDynamicRef](./useDynamicRef.md)       | Allows not re-executing React effects when a reference changes.<br/><br/>A good use case is when you call a callback provided as parameter/prop in an effect: it will ensure that your effect will not be executed again each time the callback reference changes. |
| [useEventListener](./useEventListener.md) | Allows listening window events with automatic cleaning.                                                                                                                                                                                                            |
| [useKeyMap](./useKeyMap.md)               | Allows listening keyboard events.                                                                                                                                                                                                                                  |
| [useLazy](./useLazy.md)                   | Allows detecting when a given element is displayed in the viewport.                                                                                                                                                                                                |
| [useList](./useList.md)                   | Allows managing lists easily.                                                                                                                                                                                                                                      |
"
`;

exports[`api-documenter should generate doc useDynamicRef.md should match snapshot 1`] = `
"<!-- Do not edit this file. It is automatically generated by API Documenter. -->

[api-documenter](../README.md) > [API Documentation](./README.md) > useDynamicRef

# useDynamicRef

Allows not re-executing React effects when a reference changes.

A good use case is when you call a callback provided as parameter/prop in an effect: it will ensure that your effect will not be executed again each time the callback reference changes.

\`\`\`typescript
function useDynamicRef<T>(value: T): MutableRefObject<T>
\`\`\`

## Parameters

| Parameter | Type | Description |
| --------- | ---- | ----------- |
| value     | \`T\`  |             |

## Returns

\`MutableRefObject<T>\`
"
`;

exports[`api-documenter should generate doc useEventListener.md should match snapshot 1`] = `
"<!-- Do not edit this file. It is automatically generated by API Documenter. -->

[api-documenter](../README.md) > [API Documentation](./README.md) > useEventListener

# useEventListener

Allows listening window events with automatic cleaning.

\`\`\`typescript
function useEventListener<
  EventType extends keyof WindowEventMap
>(
  eventType: EventType,
  handler: (event: WindowEventMap[EventType]) => void,
  active?: boolean
): void
\`\`\`

## Parameters

| Parameter | Type                                         | Description |
| --------- | -------------------------------------------- | ----------- |
| eventType | \`EventType\`                                  |             |
| handler   | \`(event: WindowEventMap[EventType]) => void\` |             |
| active    | \`boolean \`                                   |             |

## Returns

\`void\`
"
`;

exports[`api-documenter should generate doc useKeyMap.md should match snapshot 1`] = `
"<!-- Do not edit this file. It is automatically generated by API Documenter. -->

[api-documenter](../README.md) > [API Documentation](./README.md) > useKeyMap

# useKeyMap

Allows listening keyboard events.

\`\`\`typescript
function useKeyMap(keyMap: {
    [keyStr: string]: (event: KeyboardEvent) => false | any;
}, active?: boolean, priority?: number): void
\`\`\`

## Parameters

| Parameter | Type                                                               | Description |
| --------- | ------------------------------------------------------------------ | ----------- |
| keyMap    | \`{     [keyStr: string]: (event: KeyboardEvent) => false ǀ any; }\` |             |
| active    | \`boolean\`                                                          |             |
| priority  | \`number\`                                                           |             |

## Returns

\`void\`
"
`;

exports[`api-documenter should generate doc useLazy.md should match snapshot 1`] = `
"<!-- Do not edit this file. It is automatically generated by API Documenter. -->

[api-documenter](../README.md) > [API Documentation](./README.md) > useLazy

# useLazy

Allows detecting when a given element is displayed in the viewport.

\`\`\`typescript
function useLazy<T extends HTMLElement>(elementRef: RefObject<T>, enabled?: boolean): {
    hasBeenDisplayed: boolean;
}
\`\`\`

## Parameters

| Parameter  | Type           | Description |
| ---------- | -------------- | ----------- |
| elementRef | \`RefObject<T>\` |             |
| enabled    | \`boolean\`      |             |

## Returns

\`{
    hasBeenDisplayed: boolean;
}\`
"
`;

exports[`api-documenter should generate doc useList.md should match snapshot 1`] = `
"<!-- Do not edit this file. It is automatically generated by API Documenter. -->

[api-documenter](../README.md) > [API Documentation](./README.md) > useList

# useList

Allows managing lists easily.

\`\`\`typescript
function useList<T>(initialValues?: T[] | (() => T[])): [T[], ListManager<T>]
\`\`\`

## Parameters

| Parameter     | Type                | Description |
| ------------- | ------------------- | ----------- |
| initialValues | \`T[] ǀ (() => T[])\` |             |

## Returns

\`[T[], ListManager<T>]\`
"
`;
